import asyncio
import logging
import datetime
import os
import random
from dotenv import load_dotenv, find_dotenv
from pyrogram import Client
from pyrogram.enums import ChatType
from pyrogram.errors import MessageIdInvalid


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è "Waiting for ..." —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç pyrogram
class PyrogramFilter(logging.Filter):
    def filter(self, record):
        msg = record.getMessage()
        if "Waiting for" in msg and "messages.SendReaction" in msg:
            return False
        return True


# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy_HH.MM.SS.log
log_filename = datetime.datetime.now().strftime("%d.%m.%y_%H.%M.%S.log")
logging.basicConfig(
    encoding='utf-8',
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%m/%d/%Y %I:%M:%S %p',
    filename=log_filename
)
# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
console.setFormatter(formatter)
logging.getLogger('').addHandler(console)

# –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç pyrogram –∏ asyncio
pyrogram_logger = logging.getLogger("pyrogram")
pyrogram_logger.setLevel(logging.WARNING)
pyrogram_logger.addFilter(PyrogramFilter())
logging.getLogger("asyncio").setLevel(logging.WARNING)


class ReactionBot:
    def __init__(self, client: Client, emojis: str, group_limit: int = 6):
        self.client = client
        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏)
        self.default_emojis = list(emojis)
        self.group_limit = group_limit

    async def select_group(self):
        groups = []
        async for dialog in self.client.get_dialogs():
            if dialog.chat.type == ChatType.SUPERGROUP:
                groups.append(dialog)
        if not groups:
            logging.error("–ù–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –¥–ª—è —Ä–∞–±–æ—Ç—ã, –æ—Ç—ä–µ–±–∏—Å—å!")
            raise Exception("–ù–µ—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø")
        for index, group in enumerate(groups):
            print(f"[{index}] {group.chat.title}")
        while True:
            try:
                num_group = int(input('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É: '))
                if num_group < 0 or num_group >= len(groups):
                    raise ValueError
                return groups[num_group]
            except ValueError:
                print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –¥–æ–ª–±–æ—ë–±.")

    async def get_msgids(self, chat_id: int, limit: int, all_messages: bool = False):
        msgids = []
        if not all_messages:
            async for msg in self.client.get_chat_history(chat_id=chat_id, limit=limit):
                msgids.append(msg.id)
        else:
            async for msg in self.client.get_chat_history(chat_id=chat_id):
                msgids.append(msg.id)
        return msgids

    async def react_on_message(self, chat_id: int, msg_id: int, chat_title: str, premium: bool, allowed_emojis: list):
        identifier = f'[{chat_title}/{msg_id}]'
        logging.info(f'{identifier} –ù–∞—á–∏–Ω–∞—é —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏')

        # –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º ‚Äì —Å—Ç–∞–≤–∏–º 1, 2 –∏–ª–∏ 3 —Ä–µ–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ —Ä–æ–≤–Ω–æ 1
        num_reactions = random.randint(1, 3) if premium else 1
        try:
            chosen_emojis = random.sample(allowed_emojis, num_reactions)
        except ValueError:
            chosen_emojis = allowed_emojis

        for emoji in chosen_emojis:
            try:
                await self.client.send_reaction(
                    chat_id=chat_id,
                    message_id=msg_id,
                    emoji=emoji  # –ø–µ—Ä–µ–¥–∞—ë–º —Ä–µ–∞–∫—Ü–∏—é –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                )
                logging.info(f'{identifier} –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {emoji}')
            except MessageIdInvalid:
                logging.exception(f'{identifier} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π message_id')
            except Exception as e:
                logging.exception(f'{identifier} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ {emoji}: {e}')
            # –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 6 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥–∞ –Ω–µ —Ä—É–≥–∞–ª–∞—Å—å
            await asyncio.sleep(6)
        logging.info(f'{identifier} –ó–∞–≤–µ—Ä—à–∏–ª —Ä–µ–∞–∫—Ü–∏–∏')

    async def run(self):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        while True:
            mode = input(
                "\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:\n1 - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π\n2 - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ\n3 - –í—ã—Ö–æ–¥\n–¢–≤–æ–π –≤—ã–±–æ—Ä: "
            ).strip()
            if mode == "1":
                try:
                    last_messages = int(input('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ (1-6): '))
                    if last_messages < 1 or last_messages > self.group_limit:
                        raise ValueError
                except ValueError:
                    logging.error("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6, –æ—Ç–≤–∞–ª–∏!")
                    continue
                fetch_all = False
            elif mode == "2":
                fetch_all = True
                last_messages = None
            elif mode == "3":
                logging.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                return
            else:
                logging.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞, –æ—Ç–≤–∞–ª–∏!")
                continue

            async with self.client:
                me = await self.client.get_me()
                premium = getattr(me, "is_premium", False)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å premium: {premium}")

                selected_chat = await self.select_group()
                chat_id = selected_chat.chat.id
                chat_title = selected_chat.chat.title

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
                try:
                    chat_details = await self.client.get_chat(chat_id)
                    if hasattr(chat_details, "available_reactions") and chat_details.available_reactions:
                        if chat_details.available_reactions.all_are_enabled:
                            allowed_emojis = self.default_emojis  # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –í–°–ï —Ä–µ–∞–∫—Ü–∏–∏
                        else:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ Reaction
                            allowed_emojis = [r.emoji for r in chat_details.available_reactions.reactions]
                        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å–º–∞–π–ª—ã, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ: {allowed_emojis}")
                    else:
                        allowed_emojis = self.default_emojis
                        logging.info("–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤")
                except Exception as e:
                    logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–º–∞–π–ª–æ–≤: {e}")
                    allowed_emojis = self.default_emojis

                logging.info(f'[{chat_title}] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π')
                # –¶–∏–∫–ª –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π "exit"
                while True:
                    if not fetch_all:
                        msg_ids = await self.get_msgids(chat_id, last_messages, all_messages=False)
                    else:
                        msg_ids = await self.get_msgids(chat_id, 0, all_messages=True)
                    if not msg_ids:
                        logging.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
                        break

                    tasks = []
                    for msg_id in msg_ids:
                        tasks.append(
                            asyncio.create_task(
                                self.react_on_message(chat_id, msg_id, chat_title, premium, allowed_emojis))
                        )
                        await asyncio.sleep(0.5)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                    if tasks:
                        await asyncio.gather(*tasks)

                    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π—Ç–∏ –∏–∑ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞
                    exit_command = await asyncio.to_thread(
                        input, "–ù–∞–∂–º–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é: "
                    )
                    if exit_command.strip().lower() == "exit":
                        logging.info("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        break


def create_reaction_bot():
    dotenv_file = find_dotenv()
    load_dotenv(dotenv_file)
    api_hash = os.environ.get('api_hash')
    api_id = os.environ.get('api_id')
    emojis = "üëçüëé‚ù§üî•ü•∞üëèüòÅü§îü§Øüò±ü§¨üò¢üéâü§©ü§Æüí©üôèüëåüïäü§°ü•±ü•¥üòçüê≥‚ù§‚Äçüî•üåöüå≠üíØü§£‚ö°üçåüèÜüíîü§®üòêüçìüçæüíãüñïüòàüò¥üò≠ü§ìüëªüë®‚ÄçüíªüëÄüéÉüôàüòáüò®ü§ù‚úçü§óü´°üéÖüéÑ‚òÉüíÖü§™üóøüÜíüíòüôâü¶Ñüòòüíäüôäüòéüëæü§∑‚Äç‚ôÇü§∑ü§∑‚Äç‚ôÄüò°"
    session_name = './session'
    client = Client(session_name, api_id=api_id, api_hash=api_hash)
    return ReactionBot(client, emojis)


if __name__ == '__main__':
    bot = create_reaction_bot()
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(bot.run())
    except KeyboardInterrupt:
        logging.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!")
